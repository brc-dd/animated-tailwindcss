diff --git a/dist/client/app/router.js b/dist/client/app/router.js
index 0e34ee13c32d4beed5def2f21b199ec878791568..6f282a6842cc82e87290c6dac93c8ac9dc65c655 100644
--- a/dist/client/app/router.js
+++ b/dist/client/app/router.js
@@ -21,12 +21,6 @@ const getDefaultRoute = () => ({
 export function createRouter(loadPageModule, fallbackComponent) {
     const route = reactive(getDefaultRoute());
     function go(href = inBrowser ? location.href : '/') {
-        // ensure correct deep link so page refresh lands on correct files.
-        const url = new URL(href, fakeHost);
-        if (!url.pathname.endsWith('/') && !url.pathname.endsWith('.html')) {
-            url.pathname += '.html';
-            href = url.pathname + url.search + url.hash;
-        }
         if (inBrowser) {
             // save scroll position before changing url
             history.replaceState({ scrollPosition: window.scrollY }, document.title);
diff --git a/dist/client/app/utils.js b/dist/client/app/utils.js
index 0411dde2de1581dd50e779dc82093268a103a3d9..047102a11fbd7f5b05b2fdf189221888f9bd16d1 100644
--- a/dist/client/app/utils.js
+++ b/dist/client/app/utils.js
@@ -31,7 +31,8 @@ export function pathToFile(path) {
         // /foo/bar.html -> ./foo_bar.md
         if (inBrowser) {
             const base = import.meta.env.BASE_URL;
-            pagePath = pagePath.slice(base.length).replace(/\//g, '_') + '.md';
+            pagePath =
+                (pagePath.slice(base.length).replace(/\//g, '_') || 'index') + '.md';
             // client production build needs to account for page hash, which is
             // injected directly in the page's html
             const pageHash = __VP_HASH_MAP__[pagePath.toLowerCase()];
diff --git a/dist/client/theme-default/components/NavBarTitle.vue b/dist/client/theme-default/components/NavBarTitle.vue
index 8b9d3709763ad0e16a8a4d88bfc874767509bbb7..686a685ad041cb01e04aacbe88c9e3dfe46aa18f 100644
--- a/dist/client/theme-default/components/NavBarTitle.vue
+++ b/dist/client/theme-default/components/NavBarTitle.vue
@@ -6,7 +6,7 @@ const { site, theme, localePath } = useData()
 <template>
   <a
     class="nav-bar-title"
-    :href="localePath"
+    :href="localePath.replace(/\/$/, '')"
     :aria-label="`${site.title}, back to home`"
   >
     <img
diff --git a/dist/client/theme-default/components/SideBarLink.js b/dist/client/theme-default/components/SideBarLink.js
index 68b31d7122382a7b8dbf6c1fb1ce340b80342613..4348bc10aee212c11cd4aec7c37ac99276ae6846 100644
--- a/dist/client/theme-default/components/SideBarLink.js
+++ b/dist/client/theme-default/components/SideBarLink.js
@@ -5,7 +5,9 @@ export const SideBarLink = (props) => {
     const route = useRoute();
     const { site, frontmatter } = useData();
     const depth = props.depth || 1;
-    const maxDepth = frontmatter.value.sidebarDepth || Infinity;
+    const maxDepth = frontmatter.value.sidebarDepth ||
+        site.value.themeConfig.sidebarDepth ||
+        Infinity;
     const headers = route.data.headers;
     const text = props.item.text;
     const link = resolveLink(site.value.base, props.item.link);
diff --git a/dist/client/theme-default/composables/sideBar.js b/dist/client/theme-default/composables/sideBar.js
index df72937df2407e8405f940735f5bc21611956da0..c52fbd84870ab094343a01e864f1f090af50bbc2 100644
--- a/dist/client/theme-default/composables/sideBar.js
+++ b/dist/client/theme-default/composables/sideBar.js
@@ -10,7 +10,7 @@ export function useSideBar() {
         // at first, we'll check if we can find the sidebar setting in frontmatter.
         const headers = route.data.headers;
         const frontSidebar = route.data.frontmatter.sidebar;
-        const sidebarDepth = route.data.frontmatter.sidebarDepth;
+        const sidebarDepth = route.data.frontmatter.sidebarDepth || site.value.themeConfig.sidebarDepth;
         // if it's `false`, we'll just return an empty array here.
         if (frontSidebar === false) {
             return [];
diff --git a/dist/node/index.d.ts b/dist/node/index.d.ts
index 5f4ac2ac2a9bc24d66b5e0c5ea0aaafa0a2e7d59..2a481555a0639e147e22e6c685cc0a844cf33698 100644
--- a/dist/node/index.d.ts
+++ b/dist/node/index.d.ts
@@ -20,6 +20,7 @@ export declare namespace DefaultTheme {
         logo?: string
         nav?: NavItem[] | false
         sidebar?: SideBarConfig | MultiSideBarConfig
+        sidebarDepth?: number

         /**
          * GitHub repository following the format <user>/<project>.
diff --git a/dist/node/serve-777539c0.js b/dist/node/serve-777539c0.js
index 0ba6313a6685846f07c2c39052dd9ff53763857f..16f8db044728f767ff714413b7a9373be7829831 100644
--- a/dist/node/serve-777539c0.js
+++ b/dist/node/serve-777539c0.js
@@ -35130,12 +35130,7 @@ const linkPlugin = (md, externalAttrs, base) => {
       url = path + hash;
     } else {
       let cleanUrl = url.replace(/[?#].*$/, "");
-      if (cleanUrl.endsWith(".md")) {
-        cleanUrl = cleanUrl.replace(/\.md$/, ".html");
-      }
-      if (!cleanUrl.endsWith(".html") && !cleanUrl.endsWith("/")) {
-        cleanUrl += ".html";
-      }
+      cleanUrl = cleanUrl.replace(/\.md$/, "");
       const parsed = new url$1.URL(url, "http://a.com");
       url = cleanUrl + parsed.search + parsed.hash;
     }
@@ -40928,7 +40923,10 @@ async function renderPage(config, page, result, appChunk, cssChunk, pageToHashMa
   }).join("\n    ");
   const stylesheetLink = cssChunk ? `<link rel="stylesheet" href="${siteData.base}${cssChunk.fileName}">` : "";
   const title = pageData.title && pageData.title !== "Home" ? `${pageData.title} | ${siteData.title}` : siteData.title;
-  const head = addSocialTags(title, ...siteData.head, ...filterOutHeadDescription(pageData.frontmatter.head));
+  const head = [
+    ...siteData.head,
+    ...filterOutHeadDescription(pageData.frontmatter.head)
+  ];
   let inlinedScript = "";
   if (config.mpa && result) {
     const matchingChunk = result.output.find((chunk) => chunk.type === "chunk" && chunk.facadeModuleId === slash(path__default["default"].join(config.srcDir, page)));
@@ -41002,22 +41000,6 @@ function isMetaDescription(headConfig) {
 function filterOutHeadDescription(head) {
   return head ? head.filter((h) => !isMetaDescription(h)) : [];
 }
-function hasTag(head, tag) {
-  const [tagType, tagAttrs] = tag;
-  const [attr, value] = Object.entries(tagAttrs)[0];
-  return head.some(([type, attrs]) => type === tagType && attrs[attr] === value);
-}
-function addSocialTags(title, ...head) {
-  const tags = [
-    ["meta", { name: "twitter:title", content: title }],
-    ["meta", { property: "og:title", content: title }]
-  ];
-  tags.filter((tagAttrs) => {
-    if (!hasTag(head, tagAttrs))
-      head.push(tagAttrs);
-  });
-  return head;
-}

 async function build(root, buildOptions = {}) {
   const start = Date.now();
diff --git a/types/default-theme.d.ts b/types/default-theme.d.ts
index d72848717e1980bc9ac78c94b4262868b19593b3..f4071a7bf9069272050117b4f2c647a1f83ecb28 100644
--- a/types/default-theme.d.ts
+++ b/types/default-theme.d.ts
@@ -3,6 +3,7 @@ export namespace DefaultTheme {
     logo?: string
     nav?: NavItem[] | false
     sidebar?: SideBarConfig | MultiSideBarConfig
+    sidebarDepth?: number

     /**
      * GitHub repository following the format <user>/<project>.
diff --git a/dist/client/app/index.js b/dist/client/app/index.js
index 95a6a4bef892a76a6de2d6a44b4afe890de6dafa..2c92f84eaa1a2e88d309c23d9038f550eaf0aefa 100644
--- a/dist/client/app/index.js
+++ b/dist/client/app/index.js
@@ -33,10 +33,6 @@ export function createApp() {
     app.provide(RouterSymbol, router);
     const data = initData(router.route);
     app.provide(dataSymbol, data);
-    if (inBrowser) {
-        // dynamically update head tags
-        useUpdateHead(router.route, data.site);
-    }
     // install global components
     app.component('Content', Content);
     app.component('ClientOnly', ClientOnly);
@@ -56,7 +52,7 @@ export function createApp() {
             siteData: siteDataRef
         });
     }
-    return { app, router };
+    return { app, router, data };
 }
 function newApp() {
     return import.meta.env.PROD
@@ -104,9 +100,11 @@ function shouldHotReload(payload) {
     return payloadPath === locationPath;
 }
 if (inBrowser) {
-    const { app, router } = createApp();
+    const { app, router, data } = createApp();
     // wait until page component is fetched before mounting
     router.go().then(() => {
+        // dynamically update head tags
+        useUpdateHead(router.route, data.site)
         app.mount('#app');
     });
 }

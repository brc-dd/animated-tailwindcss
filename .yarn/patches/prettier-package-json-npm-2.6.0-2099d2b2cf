diff --git a/build/sort-scripts.d.ts b/build/sort-scripts.d.ts
index 5938ebd78f989f3d830fcace2387e9116b3eb7c0..54aaaaaf54eb404607992a8273a45235ebed8022 100644
--- a/build/sort-scripts.d.ts
+++ b/build/sort-scripts.d.ts
@@ -1,4 +1,6 @@
-import { PackageJson } from './types';
-export default function sortScripts(scripts: PackageJson['scripts']): {
-    scripts?: PackageJson['scripts'];
+import type { PackageJson } from './types';
+declare type Scripts = PackageJson['scripts'];
+declare const sortScripts: (scripts?: Scripts) => {
+    scripts?: Scripts;
 };
+export default sortScripts;
diff --git a/build/sort-scripts.js b/build/sort-scripts.js
index 425fe4d49d5f5b25303e0168484f3e1bdadbab22..96c770631d137b8920d4cce59ddcc48cf79abcde 100644
--- a/build/sort-scripts.js
+++ b/build/sort-scripts.js
@@ -3,38 +3,46 @@ var __importDefault = (this && this.__importDefault) || function (mod) {
     return (mod && mod.__esModule) ? mod : { "default": mod };
 };
 exports.__esModule = true;
-var sort_object_keys_1 = __importDefault(require("sort-object-keys"));
 var sort_order_1 = __importDefault(require("sort-order"));
-var PRE_OR_POST_PREFIX = /^(pre|post)/;
+var sort_object_keys_1 = __importDefault(require("sort-object-keys"));
+var inbuiltScripts = ['install', 'pack', 'publish', 'restart', 'start', 'stop', 'test', 'uninstall', 'version'];
+// Remove pre/post prefixes from script name
+var removePrefix = function (scripts, arg, prefix) {
+    if (prefix !== 'post' && arg === 'prepublishOnly')
+        return 'publish';
+    var base = arg.replace(new RegExp("^(" + (prefix || 'pre|post') + ")"), '');
+    return base !== arg && (scripts.hasOwnProperty(base) || inbuiltScripts.includes(base)) ? base : false;
+};
 // Sort alphabetically by script name excluding pre/post prefixes
-function scriptName() {
+var scriptName = function (scripts) {
     var args = [];
-    for (var _i = 0; _i < arguments.length; _i++) {
-        args[_i] = arguments[_i];
-    }
-    var _a = args.map(function (arg) { return arg.replace(PRE_OR_POST_PREFIX, ''); }), a = _a[0], b = _a[1];
-    if (a !== b) {
-        return a < b ? -1 : 1;
+    for (var _i = 1; _i < arguments.length; _i++) {
+        args[_i - 1] = arguments[_i];
     }
-    else {
-        return 0;
-    }
-}
+    var _a = args.map(function (arg) { return removePrefix(scripts, arg) || arg; }), a = _a[0], b = _a[1];
+    return a === b ? 0 : a < b ? -1 : 1;
+};
 // Sort by pre, script, post
-function prePostHooks(a, b) {
-    if (a.startsWith('pre') || b.startsWith('post')) {
+var prePostHooks = function (scripts, a, b) {
+    if (removePrefix(scripts, a, 'pre') || removePrefix(scripts, b, 'post'))
         return -1;
-    }
-    else if (a.startsWith('post') || b.startsWith('pre')) {
+    if (removePrefix(scripts, a, 'post') || removePrefix(scripts, b, 'pre'))
         return 1;
+    return 0;
+};
+// Sort publish scripts in an opinionated order
+var publishScripts = function () {
+    var args = [];
+    for (var _i = 0; _i < arguments.length; _i++) {
+        args[_i] = arguments[_i];
     }
-    else {
-        return 0;
-    }
-}
-var order = sort_order_1["default"](scriptName, prePostHooks);
-function sortScripts(scripts) {
-    var keys = Object.keys(scripts || {});
-    return keys.length === 0 ? {} : { scripts: sort_object_keys_1["default"](scripts, keys.sort(order)) };
-}
+    var _a = args.map(function (arg) { return ['prepublish', 'prepublishOnly', 'publish', 'postpublish'].indexOf(arg); }), a = _a[0], b = _a[1];
+    return a === -1 || b === -1 || a === b ? 0 : a < b ? -1 : 1;
+};
+var sortScripts = function (scripts) {
+    if (scripts === void 0) { scripts = {}; }
+    var order = sort_order_1["default"](function (a, b) { return scriptName(scripts, a, b); }, function (a, b) { return prePostHooks(scripts, a, b); });
+    var keys = Object.keys(scripts);
+    return keys.length === 0 ? {} : { scripts: sort_object_keys_1["default"](scripts, keys.sort(order).sort(publishScripts)) };
+};
 exports["default"] = sortScripts;
